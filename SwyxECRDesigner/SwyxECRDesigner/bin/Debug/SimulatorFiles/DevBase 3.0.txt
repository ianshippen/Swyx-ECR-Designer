' ReachAll ECR Designer for Swyx
' Autogenerated code
' From config file: "DefaultBuild 3.0.cfg"
' Copyright Ian Shippen 2019
' 02/04/2019 14:02:47
' Source Modules
'  "Base"
'  "Constants"
'  "ConvertDateToISO"
'  "DBExecute"
'  "DBReturnResults"
'  "GenerateDatabaseConnectionString"
'  "GetUserByAddressWrapper"
'  "IsAgentFree"
'  "Scripts"
'  "SIBBClass"
'  "SingleQuoteCheck"
'  "TargetLogError"
'  "WrapInQuotes"
'  "WrapInSingleQuotes"
' 609 Lines - Checksum = 22129

Const DATA_SOURCE = ".\SQLEXPRESS"
Const STANDBY_DATA_SOURCE = ""
Const STANDBY_MACHINE_NAME = ""
Const DATABASE = "OpenQueue"
Const USERID = "reachall"
Const PASSWORD = "reachall"

Const STATUS_STATE_UNAVAILABLE = 0
Const STATUS_LOGGED_OFF = 1
Const STATUS_AVAILABLE = 2
Const STATUS_SPEAKING_EXTERNAL = 3
Const STATUS_ALERTING = 4
Const STATUS_SPEAKING_INTERNAL = 5
Const STATUS_AWAY = 6
Const STATUS_DND = 7

Const YELLOW_OPTION = "2"

' Red means show as available if Idle or On a call
' Yellow means show as available only if Idle 

Dim debugFlag, baseUsesArrayList, variablesDictionary

debugFlag = False
Set baseUsesArrayList = CreateObject("System.Collections.ArrayList")
Set variablesDictionary = CreateObject("Scripting.Dictionary")

' If variable exists then sets it to the new value, otherwise creates it with this value
Sub SetVar(ByRef p_key, ByRef p_value)
	If variablesDictionary.Exists(p_key) Then
		variablesDictionary.Item(p_key) = p_value
	Else
		variablesDictionary.Add p_key, p_value
	End If
End Sub

' If variable exists then does nothing, otherwise creates it with this value
Sub AddVar(ByRef p_key, ByRef p_value)
	If Not variablesDictionary.Exists(p_key) Then variablesDictionary.Add p_key, p_value
End Sub

Function GetVar(ByRef p_key)
	Dim result : result = ""

	If variablesDictionary.Exists(p_key) Then result = variablesDictionary.Item(p_key)

	GetVar = result
End Function

Function IsVar(ByRef p_key, ByRef p_value)
	Dim result : result = False

	If variablesDictionary.Exists(p_key) Then
		If variablesDictionary.Item(p_key) = p_value Then result = True
        End If

	IsVar = result
End Function

Function IsVarTrue(ByRef p_key)
	Dim result : result = False

	If variablesDictionary.Exists(p_key) Then
		If LCase(variablesDictionary.Item(p_key)) = "true" Then result = True
        End If

	IsVarTrue = result
End Function

Function IsVarInt(ByRef p_key)
	Dim result : result = False
	Dim startIndex : startIndex = 1
	Dim i, myCode
	Dim myString : myString = GetVar(p_key)

	If myString <> "" Then
		If Left(myString, 1) = "+" Or Left(myString, 1) = "-" Then startIndex = 2

		If startIndex <= Len(myString) Then
			result = True

			For i = startIndex To Len(myString)
				myCode = Asc(Mid(myString, i, 1))

				If myCode < Asc("0") Or myCode > Asc("9") Then
					result = False
					Exit For
				End If
			Next
		Else
			result = False
		End If
	End If

	IsVarInt = result
End Function

Function IncVar(ByRef p_key)
	If IsVarInt(p_key) Then SetVar p_key, CStr(CLng(GetVar(p_key)) + 1)
End Function

Function DecVar(ByRef p_key)
	If IsVarInt(p_key) Then SetVar p_key, CStr(CLng(GetVar(p_key)) - 1)
End Function

baseUsesArrayList.Add "Base"
baseUsesArrayList.Add "Constants"
baseUsesArrayList.Add "ConvertDateToISO"
baseUsesArrayList.Add "DBExecute"
baseUsesArrayList.Add "DBReturnResults"
baseUsesArrayList.Add "GenerateDatabaseConnectionString"
baseUsesArrayList.Add "GetUserByAddressWrapper"
baseUsesArrayList.Add "IsAgentFree"
baseUsesArrayList.Add "Scripts"
baseUsesArrayList.Add "SIBBClass"
baseUsesArrayList.Add "SingleQuoteCheck"
baseUsesArrayList.Add "TargetLogError"
baseUsesArrayList.Add "WrapInQuotes"
baseUsesArrayList.Add "WrapInSingleQuotes"

Function ConvertDateToISO(p_date)
	dim a, result, temp 

	result = Year(p_date) & "-"	
	temp = Month(p_date)

	If temp < 10 Then result = result & "0"

	result = result & temp & "-"
	temp = Day(p_date)
	
	If temp < 10 Then result = result & "0"

	result = result & temp & " "

	temp = Hour(p_date)

	If temp < 10 Then result = result & "0"

	result = result & temp & ":"
	temp = Minute(p_date)

	If temp < 10 Then result = result & "0"

	result = result & temp & ":"
	temp = Second(p_date)

	If temp < 10 Then result = result & "0"

	result = result & temp

	ConvertDateToISO = result
End Function


Sub DBExecute(ByRef p_statement)
  Dim db

  On Error Resume Next
  Set db = CreateObject("ADODB.Connection")

  If Err = 0 Then
    db.Open GenerateDatabaseConnectionString()

    If Err = 0 Then
      db.Execute p_statement

      If Err <> 0 Then
        LogError "DBExecute(" & p_statement & ") could not execute statement"
        LogError "DBExecute: " & Err.Source
        LogError "DBExecute: " & Err.Description
      End If

      db.Close
    Else
      LogError "DBExecute(" & p_statement & ") could not open database with connection string = " & WrapInQuotes(GenerateDatabaseConnectionString())
      LogError "DBExecute: " & Err.Source
      LogError "DBExecute: " & Err.Description
    End If
    
    Set db = nothing
  Else
    LogError "DBExecute(" & p_statement & ") could not create ADODB.Connection"
    LogError "DBExecute: " & Err.Source
    LogError "DBExecute: " & Err.Description
  End If
End Sub


Function DBReturnResults(ByRef p_statement, ByRef p_rs, ByRef p_db)
  Dim rc, foundError

  rc = False
  foundError = False
  
  On Error Resume Next

  If p_db Is Nothing Then
    Set p_db = CreateObject("ADODB.Connection")

    If Err <> 0 Then
      LogError "Error in DBReturnResults::CreateObject(" & WrapInQuotes("ADODB.Connection") &")"
      LogError "Error code = " & CStr(Hex(Err))
      LogError "Error description = " & Err.Description
      foundError = True
    End If

    If foundError = False Then
      p_db.Open GenerateDatabaseConnectionString()

      If Err <> 0 Then
        LogError "Error in DBReturnResults::Open(" & WrapInQuotes(GenerateDatabaseConnectionString()) &")"
        LogError "Error code = " & CStr(Hex(Err))
        LogError "Error description = " & Err.Description
        foundError = True
      End  If
    End If
  End If

  If foundError = False Then
    Set p_rs = p_db.Execute(p_Statement)
  
    If Err = 0 Then
      rc = True
    Else
      LogError "Error in DBReturnResults::db.Execute(" & WrapInQuotes(p_Statement) & ")"
      LogError "Error code = " & CStr(Hex(Err))
      LogError "Error description = " & Err.Description
      foundError = True
    End If
  End If

  DBReturnResults = rc
End Function


Function GenerateDatabaseConnectionString()
	GenerateDatabaseConnectionString = "Provider=SQLOLEDB;Data Source=" & GetDataSource() & ";Initial Catalog=" & DATABASE & ";User Id=" & USERID & ";Password=" & PASSWORD
End Function

Function GetDataSource()
  Dim x : x = DATA_SOURCE

  If STANDBY_MACHINE_NAME <> "" Then
    Dim y : Set y = CreateObject("WScript.Network")

    If LCase(STANDBY_MACHINE_NAME) = LCase(y.ComputerName) Then x = STANDBY_DATA_SOURCE

    Set y = Nothing
  End If

  GetDataSource = x
End Function


Function GetUserByAddressWrapper(ByRef p_target, ByRef p_info)
	Dim x
	Dim result : result = False

	On Error Resume Next

	Set p_info = Nothing

	If debugFlag Then LogError "GetUserByAddressWrapper(" & WrapInQuotes(p_target) & ") called"

	Set x = PBXScript.CreateObject("IpPbxSrv.PBXConfig")

	If Err = 0 Then
    		x.Initialize PBXUser

		If Err = 0 Then
      			Set p_info = x.GetUserByAddress(p_target)

			If Err = 0 Then
				result = True

        			If debugFlag Then
          				Dim myUser

          				For Each myUser In p_info
            					LogError "GetUserByAddressWrapper: GetUserByAddress() returned Name = " & WrapInQuotes(myUser.Name) & ", State = " & myUser.State
          				Next
        			End If
			Else
				LogError "GetUserByAddressWrapper(" & WrapInQuotes(p_target) & ") could not Get User By Address"
				LogError "GetUserByAddressWrapper: " & Err.Source
				LogError "GetUserByAddressWrapper: " & Err.Description

				' Flip the case of one or more letters in the target string
				dim y : y = ""

				Randomize

				For i = 1 To Len(p_target)
					Dim a : a = Asc(Mid(p_target, i, 1))

					If (a >= 65 And a <= 90) Or (a >= 97 And a <= 122) Then
						If rnd >= 0.5 Then
							If a <= 90 Then
								a = a + 32
							Else
								a = a - 32
							End If
	
							y = y & Chr(a)
						Else
							y = y & Mid(p_target, i, 1)
						End If
					Else
						y = y & Mid(p_target, i, 1)
					End If 
				Next

				' Try again
				Err.Clear
				Set p_info = Nothing
				Set p_info = x.GetUserByAddress(y)

				If Err = 0 Then
					result = True
				Else
					LogError "GetUserByAddressWrapper(" & WrapInQuotes(p_target) & ") could not Get User By Address on retry"
					LogError "GetUserByAddressWrapper: " & Err.Source
					LogError "GetUserByAddressWrapper: " & Err.Description
				End If
			End If
    		Else
			LogError "GetUserByAddressWrapper(" & WrapInQuotes(p_target) & ") could not Initialize PBXUser"
			LogError "GetUserByAddressWrapper: " & Err.Source
			LogError "GetUserByAddressWrapper: " & Err.Description
		End If

		Set x = Nothing
	Else
    		LogError "GetUserByAddressWrapper(" & WrapInQuotes(p_target) & ") could not create PBXConfig object"
    		LogError "GetUserByAddressWrapper: " & Err.Source
    		LogError "GetUserByAddressWrapper: " & Err.Description
	End If

	GetUserByAddressWrapper = result
End Function


Function IsAgentFree(ByRef p)
	Dim myUsers, result, myUser

	On Error Resume Next
	result = False

	If debugFlag Then LogError "IsAgentFree(" & WrapInQuotes(p) & ") called"

	If GetUserByAddressWrapper(p, myUsers) Then
		For Each myUser in myUsers
			' Check for state = 2 (logged in)
     			If myUser.state = 2 Then
          			'Is client really available ?
          			If PBXScript.IsUserOrGroupBusy(p) = 0 Then result = true
     			End If
		Next

		Set myUsers = Nothing
	Else
		LogError "IsAgentFree(" & WrapInQuotes(p) & ") could not get user by address"
		LogError "IsAgentFree: " & Err.Source
		LogError "IsAgentFree: " & Err.Description
	End If

	IsAgentFree = result

	If debugFlag Then LogError "IsAgentFree(" & WrapInQuotes(p) & ") returned " & result
End Function


Dim myUseExit

Sub RunScript(ByRef p_scriptName, ByRef p_immediateCommand, ByRef p_pullInSIBBsFor)
  If debugFlag Then Logerror "Scripts.txt::ServiceBuilder::RunScript(" & WrapInQuotes(p_scriptName) & ", " & WrapInQuotes(p_immediateCommand) & ")"
  Dim rs, db, myCode, mySql, myList, i, count, myUsesArrayList

  ' Pull in any static code for a Start Block
  mySql = "SELECT data FROM ServiceBuilderTable WHERE scriptName = " & WrapInSingleQuotes(p_pullinSIBBsFor) & " AND nodeType = 'SIBB_Start'"
  Set db = Nothing
  myCode = ""

  If DBReturnResults(mySql, rs, db) Then
    If Not rs.EOF Then
      If Not IsNull(rs("data")) Then myCode = CStr(rs("data"))
    End If
  End If

  Set rs = Nothing
  
  If Len(myCode) > 0 Then myCode = myCode & vbCrLf
  
  myCode = myCode & p_immediateCommand
  mySql = "SELECT code FROM scripts WHERE FunctionName = " & WrapInSingleQuotes(p_scriptName) & " ORDER BY lineNumber"
  count = 0
  Set myUsesArrayList = CreateObject("System.Collections.ArrayList")

  If DBReturnResults(mySql, rs, db) Then
    While Not rs.EOF
      If Not IsNull(rs("Code")) Then
        If Len(myCode) > 0 Then myCode = myCode & vbCrLf

        myCode = myCode & rs("Code")
        count = count + 1
      End If
      
      rs.MoveNext
    Wend

    If debugFlag Then LogError "Scripts.txt::ServiceBuilder::RunScript() found " & count & " lines of code for " & WrapInQuotes(p_scriptName)

    Set rs = Nothing

    If p_pullInSIBBsFor <> "" Then
      mySQL = "SELECT DISTINCT nodeType FROM ServiceBuilderTable WHERE scriptName = " & WrapInSingleQuotes(p_pullInSIBBsFor)
      Set myList = CreateObject("System.Collections.ArrayList")

      If DBReturnResults(mySql, rs, db) Then
        While Not rs.EOF
          If Not IsNull(rs("nodeType")) Then
            Dim myNodeName : myNodeName = rs("nodeType")

            myList.Add(myNodeName)
          End If

          rs.MoveNext
        Wend

        If debugFlag Then
          LogError "Scripts.txt::ServiceBuilder::RunScript() requires " & myList.Count() & " SIBBs for " & WrapInQuotes(p_pullInSIBBsFor)

          For i = 0 To myList.Count() - 1
            LogError "Scripts.txt::ServiceBuilder::RunScript() requires SIBB: " & WrapInQuotes(myList.Item(i))
          Next
        End If

        Set rs = Nothing

        ' Pull in the dependencies for each SIBB function used
        mySql = ""
 
        ' Generate a list of the SIBBs used to match against in the Needs database table
        For i = 0 To myList.Count() - 1
          If mySql <> "" Then mySql = mySql & ","

          mySql = mySql & WrapInSingleQuotes(myList.Item(i))
        Next

        If mySql <> "" Then
          mySql = "SELECT DISTINCT Needs FROM SIBBNeedsTable WHERE SIBB IN (" & mySql & ")"
          
          If DBReturnResults(mySql, rs, db) Then
            While Not rs.EOF
              If Not IsNull(rs("Needs")) Then
                Dim myObject : myObject = CStr(rs("Needs"))

                If myObject <> "" Then
                  If Not myUsesArrayList.Contains(myObject) Then myUsesArrayList.Add(myObject)
                End If
              End If
  
              rs.MoveNext
            Wend
          End If
        End If
       
        For i = 0 To myUsesArrayList.Count() - 1
          If debugFlag Then LogError "Scripts.txt::ServiceBuilder::RunScript() SIBBs need " & WrapInQuotes(myUsesArrayList.Item(i))

          If baseUsesArrayList.Contains(myUsesArrayList.Item(i)) Then
            If debugFlag Then LogError "Scripts.txt::ServiceBuilder::RunScript() already have " & WrapInQuotes(myUsesArrayList.Item(i)) & " via Base"
          Else
            myList.Add(myUsesArrayList.Item(i))
          End If
        Next

        Set rs = Nothing

        ' Pull in the source code for each SIBB function and needs used
        For i = 0 To myList.Count() - 1
          If debugFlag Then LogError "Scripts.txt::ServiceBuilder::RunScript() looking for code for " & WrapInQuotes(myList.Item(i))

          mySql = "SELECT code FROM scripts WHERE FunctionName = " & WrapInSingleQuotes(myList.Item(i)) & " ORDER BY lineNumber"
          count = 0

          If DBReturnResults(mySql, rs, db) Then
            While Not rs.EOF
              If Not IsNull(rs("Code")) Then
                If Len(myCode) > 0 Then myCode = myCode & vbCrLf

                myCode = myCode & rs("Code")
                count = count + 1
              End If
      
              rs.MoveNext
            Wend

            Set rs = Nothing

            If count = 0 Then LogError "Scripts.txt::ServiceBuilder::Runscript() Error: Could not find code in Scripts table for " & WrapInQuotes(myList.Item(i))            

            If debugFlag Then LogError "Scripts.txt::ServiceBuilder::Runscript() found " & count & " lines of code for " & WrapInQuotes(myList.Item(i))
          Else
            LogError "Scripts.txt::ServiceBuilder::Runscript() Error: Looking for code for " & WrapInQuotes(myList.Item(i))
          End If
        Next
      End If

      Set myList = Nothing
    End If

    db.Close
    Set db = Nothing

    If debugFlag Then LogError "Scripts.txt::ServiceBuilder::RunScript() about to execute"

    ExecuteGlobal myCode
  Else
    LogError "Scripts.txt::ServiceBuilder::RunScript() Error: DBReturnResults() failed"
  End If

  Set myUsesArrayList = Nothing
  Set baseUsesArrayList = Nothing
End Sub


Class SIBBClass
  Public nodeNumber, nodeType, data, outputs, title, internalReference

  Private Sub Class_Initialize
    nodeNumber = -1
    nodeType = ""
    data = ""
    outputs = ""
    title = ""
    internalReference = ""
  End Sub
End Class

Class SIBBListClass
  private myCollection
  private myDebugFlag

  Private Sub Class_Initialize
    Set myCollection = CreateObject("System.Collections.ArrayList")
  End Sub

  Private Sub Class_Terminate
    Set myCollection = Nothing
  End Sub

  Public Sub Add(p_nodeNumber, p_nodeType, p_data, p_outputs, p_title, p_internalReference)
    Dim x

    If myDebugFlag Then LogError "SIBBListClass::Add(" & p_nodeNumber & ", " & WrapInQuotes(p_nodeType) & ", " & WrapInQuotes(p_data) & ", " & WrapInQuotes(p_outputs) & ", " & WrapInQuotes(p_title) & ", " & WrapInQuotes(p_internalReference)
    Set x = New SIBBClass
    x.nodeNumber = p_nodeNumber
    x.nodeType = p_nodeType
    x.data = p_data
    x.outputs = p_outputs
    x.title = p_title
    x.internalReference = p_internalReference
    myCollection.Add x
  End Sub

  Public Sub GetEntry(ByVal p_index, ByRef p_nodeNumber, ByRef p_nodeType, ByRef p_data, ByRef p_outputs, ByRef p_title, ByRef p_internalReference)
    p_nodeNumber = myCollection.Item(p_index).nodeNumber
    p_nodeType = myCollection.Item(p_index).nodeType
    p_data = myCollection.Item(p_index).data
    p_outputs = myCollection.Item(p_index).outputs
    p_title = myCollection.Item(p_index).title
    p_internalReference = myCollection.Item(p_index).internalReference
  End Sub

  Public Function GetCount()
    GetCount = myCollection.Count()
  End Function

  Public Sub Debug(p_debugFlag)
    myDebugFlag = p_debugFlag
  End Sub
End Class


Function SingleQuoteCheck(ByRef p)
	SingleQuoteCheck = Replace(p, "'", "''")
End Function


Sub LogError(ByRef p_error)
  PBXScript.OutputTrace "ReachAll ECR Designer: " & p_error
End Sub


Function WrapInQuotes(ByRef p)
	WrapInQuotes = chr(34) & p & chr(34)
End Function


Function WrapInSingleQuotes(ByRef p)
	WrapInSingleQuotes = "'" & p & "'"
End Function

