' ReachAll ECR Designer for Swyx
' Autogenerated code
' Copyright Ian Shippen 2014
' 13/03/2015 11:20:04
' 448 Lines - Checksum = 45608

Const DATA_SOURCE = "."
Const DATABASE = "IpPbxCDR"
Const STANDBY_DATA_SOURCE = "."
Const STANDBY_MACHINE_NAME = "ECOURIER-SWYXS"
Const USERID = "reachall"
Const PASSWORD = "reachall"

Const STATUS_STATE_UNAVAILABLE = 0
Const STATUS_LOGGED_OFF = 1
Const STATUS_AVAILABLE = 2
Const STATUS_SPEAKING_ETERNAL = 3
Const STATUS_ALERTING = 4
Const STATUS_SPEAKING_INTERNAL = 5
Const STATUS_AWAY = 6
Const STATUS_DND = 7

Const RED_OPTION = "2,3,4,5"
Const YELLOW_OPTION = "2"
Const IDLE_ONLY = "2"
Const IDLE_AND_BUSY = "2,3,4,5"

' Red means show as available if Idle or On a call
' Yellow means show as available only if Idle 



Dim debugFlag, baseUsesArrayList, variablesDictionary

debugFlag = False
Set baseUsesArrayList = CreateObject("System.Collections.ArrayList")
Set variablesDictionary = CreateObject("Scripting.Dictionary")

baseUsesArrayList.Add "Constants"
baseUsesArrayList.Add "Base"
baseUsesArrayList.Add "ConvertDateToISO"
baseUsesArrayList.Add "DBExecute"
baseUsesArrayList.Add "DBReadScalar"
baseUsesArrayList.Add "DBReturnResults"
baseUsesArrayList.Add "GenerateDatabaseConnectionString"
baseUsesArrayList.Add "IsAgentFree"
baseUsesArrayList.Add "Queue Routines"
baseUsesArrayList.Add "Scripts"
baseUsesArrayList.Add "WrapInQuotes"
baseUsesArrayList.Add "WrapInSingleQuotes"
baseUsesArrayList.Add "TargetLogError"

Function ConvertDateToISO(p_date)
	dim a, result, temp 

	result = Year(p_date) & "-"	
	temp = Month(p_date)

	If temp < 10 Then result = result & "0"

	result = result & temp & "-"
	temp = Day(p_date)
	
	If temp < 10 Then result = result & "0"

	result = result & temp & " "

	temp = Hour(p_date)

	If temp < 10 Then result = result & "0"

	result = result & temp & ":"
	temp = Minute(p_date)

	If temp < 10 Then result = result & "0"

	result = result & temp & ":"
	temp = Second(p_date)

	If temp < 10 Then result = result & "0"

	result = result & temp

	ConvertDateToISO = result
End Function

Sub DBExecute(ByRef p_statement)
  Dim db

  On Error Resume Next
  Set db = CreateObject("ADODB.Connection")

  If Err = 0 Then
    db.Open GenerateDatabaseConnectionString()

    If Err = 0 Then
      db.Execute p_statement

      If Err <> 0 Then
        LogError "DBExecute(" & p_statement & ") could not execute statement"
        LogError "DBExecute: " & Err.Source
        LogError "DBExecute: " & Err.Description
      End If

      db.Close
    Else
      LogError "DBExecute(" & p_statement & ") could not open database with connection string = " & WrapInQuotes(GenerateDatabaseConnectionString())
      LogError "DBExecute: " & Err.Source
      LogError "DBExecute: " & Err.Description
    End If
    
    Set db = nothing
  Else
    LogError "DBExecute(" & p_statement & ") could not create ADODB.Connection"
    LogError "DBExecute: " & Err.Source
    LogError "DBExecute: " & Err.Description
  End If
End Sub

Function DBReadScalar(ByRef p_statement, ByRef p_fieldName)
  Dim db, rs, result

  On Error Resume Next
  result = ""
  Set db = CreateObject("ADODB.Connection")

  If Err = 0 Then
    db.Open GenerateDatabaseConnectionString()

    If Err = 0 Then
      Set rs = db.Execute(p_statement)
  
      If Err = 0 Then
        If Not rs.EOF Then
          result = CStr(rs(p_fieldName))
        End If
      Else
        LogError "DBReadScaler(" & WrapInQuotes(p_statement) & ", " & WrapInQuotes(p_fieldName) & ") could not execute statement = " & WrapInQuotes(p_statement)
        LogError "DBReadScaler: " & Err.Source
        LogError "DBReadScaler: " & Err.Description
      End If
      
      db.Close
    Else
      LogError "DBReadScaler(" & WrapInQuotes(p_statement) & ", " & WrapInQuotes(p_fieldName) & ") could not database with connection string = " & WrapInQuotes(GenerateDatabaseConnectionString())
      LogError "DBReadScaler: " &Err.Source
      LogError "DBReadScaler: " &Err.Description
    End If
    
    Set db = nothing
  Else
    LogError "DBReadScaler(" & WrapInQuotes(p_statement) & ", " & WrapInQuotes(p_fieldName) & ") could not create ADODB oject"
    LogError "DBReadScaler: " &Err.Source
    LogError "DBReadScaler: " &Err.Description
  End If

  DBReadScalar = result
End Function

Function DBReturnResults(ByRef p_statement, ByRef p_rs, ByRef p_db)
  Dim rc, connectionString, foundError

  rc = False
  foundError = False
  
  On Error Resume Next

  If p_db Is Nothing Then
    Set p_db = CreateObject("ADODB.Connection")

    If Err <> 0 Then
      LogError "Error in DBReturnResults::CreateObject(" & WrapInQuotes("ADODB.Connection") &")"
      LogError "Error code = " & CStr(Hex(Err))
      LogError "Error description = " & Err.Description
      foundError = True
    End If

    If foundError = False Then
      p_db.Open GenerateDatabaseConnectionString()

      If Err <> 0 Then
        LogError "Error in DBReturnResults::Open(" & WrapInQuotes(GenerateDatabaseConnectionString()) &")"
        LogError "Error code = " & CStr(Hex(Err))
        LogError "Error description = " & Err.Description
       foundError = True
      End  If
    End If
  End If

  If foundError = False Then
    Set p_rs = p_db.Execute(p_Statement)
  
    If Err = 0 Then
      rc = True
    Else
      LogError "Error in DBReturnResults::db.Execute(" & WrapInQuotes(p_Statement) & ")"
      LogError "Error code = " & CStr(Hex(Err))
      LogError "Error description = " & Err.Description
      foundError = True
    End If
  End If

  DBReturnResults = rc
End Function

Function GenerateDatabaseConnectionString()
	GenerateDatabaseConnectionString = "Provider=SQLOLEDB;Data Source=" & GetDataSource() & ";Initial Catalog=" & DATABASE & ";User Id=" & USERID & ";Password=" & PASSWORD
End Function

Function GetDataSource()
  Dim x : x = DATA_SOURCE

  If STANDBY_MACHINE_NAME <> "" Then
    Dim y : Set y = CreateObject("WScript.Network")

    If LCase(STANDBY_MACHINE_NAME) = LCase(y.ComputerName) Then x = STANDBY_DATA_SOURCE

    Set y = Nothing
  End If

  GetDataSource = x
End Function

Function IsAgentFree(p)
	Dim myUsers, result, myPBXConfig, myUser

	On Error Resume Next
	result = False

	Set myPBXConfig = PBXScript.CreateObject("IpPBxSrv.PBXConfig")

	If Err = 0 Then
		myPBXConfig.Initialize PBXUser

		If Err = 0 Then
			Set myUsers = myPBXConfig.GetUserByAddress(p)

			If Err = 0 Then
				For Each myUser in myUsers
					' Check for state = 2 (logged in)
     					If myUser.state = 2 Then
          					'Is client really available ?
          					If PBXScript.IsUserOrGroupBusy(p) = 0 Then result = true
     					End If
				Next

				Set myUsers = Nothing
			Else
				LogError "IsAgentFree(" & WrapInQuotes(p) & ") could not Get User By Address"
				LogError "IsAgentFree: " & Err.Source
				LogError "IsAgentFree: " & Err.Description
			End If
		Else
			LogError "IsAgentFree(" & WrapInQuotes(p) & ") could not Initialize PBXUser"
			LogError "IsAgentFree: " & Err.Source
			LogError "IsAgentFree: " & Err.Description
		End If

		Set myPBXConfig = Nothing
	Else
		LogError "IsAgentFree(" & WrapInQuotes(p) & ") could not create PBXConfig object"
		LogError "IsAgentFree: " & Err.Source
		LogError "IsAgentFree: " & Err.Description
	End If

	IsAgentFree = result
End Function

Sub AddCallToQueue(ByVal p_callId, ByVal p_queueId, ByRef p_tag)
	If p_callId = 0 Then p_callId = CallId()

	DBExecute "EXEC SP_ADD_CALL_TO_QUEUE " & p_callId & ", " & p_queueId & ", " & WrapinSingleQuotes(p_tag)
End Sub

Sub RemoveCallFromQueue(ByVal p_callId)
	If p_callId = 0 Then p_callId = CallId()

	ChangeQueueState p_callId, "NotInQueue"
End Sub

Sub ChangeQueueState(ByVal p_callId, ByRef p_state)
	If p_callId = 0 Then p_callId = CallId()

	DBExecute "EXEC SP_CHANGE_QUEUE_STATE " & p_callId & ", " & WrapInSingleQuotes(p_state)
End Sub

Function GetPositionInQueue(ByVal p_callId, ByVal p_timeout, ByVal p_maxQLength)
        Dim myPos

	If p_callId = 0 Then p_callId = CallId()

	myPos = QInt(DBReadScalar("EXEC SP_GET_POSITION_IN_QUEUE_EX " & p_callId & ", " & p_timeout, "position"))

        If myPos > p_maxQLength Then myPos = -1

        GetPositionInQueue = myPos
End Function

Function QInt(ByRef p)
  Dim result : result = 1000

  If Not IsNUll(p) Then
    If p <> "" Then result = CInt(p)
  End If

  QInt = result
End Function

Sub IncRings(ByVal p_callId)
	If p_callId = 0 Then p_callId = CallId()
        
  	DBExecute "UPDATE CallQueueTable SET rings = rings + 1 WHERE CallId=" & p_callId
End Sub

Dim myUseExit

Sub RunScript(ByRef p_scriptName, ByRef p_immediateCommand, ByRef p_pullInSIBBsFor)
  If debugFlag Then Logerror "ServiceBuilder::RunScript(" & WrapInQuotes(p_scriptName) & ", " & WrapInQuotes(p_immediateCommand) & ")"
  Dim rs, db, myCode, mySql, myList, i, count, myUsesArrayList
  
  ' Pull in any static code for a Start Block
  mySql = "SELECT data FROM ServiceBuilderTable WHERE scriptName = " & WrapInSingleQuotes(p_pullinSIBBsFor) & " AND nodeType = 'SIBB_Start'"
  Set db = Nothing
  myCode = ""

  If DBReturnResults(mySql, rs, db) Then
    If Not rs.EOF Then
      If Not IsNull(rs("data")) Then myCode = CStr(rs("data"))
    End If
  End If

  Set rs = Nothing
  
  If Len(myCode) > 0 Then myCode = myCode & vbCrLf
  
  myCode = myCode & p_immediateCommand
  mySql = "SELECT code FROM scripts WHERE FunctionName = " & WrapInSingleQuotes(p_scriptName) & " ORDER BY lineNumber"
  count = 0
  Set myUsesArrayList = CreateObject("System.Collections.ArrayList")

  If DBReturnResults(mySql, rs, db) Then
    While Not rs.EOF
      If Not IsNull(rs("Code")) Then
        If Len(myCode) > 0 Then myCode = myCode & vbCrLf

        myCode = myCode & rs("Code")
        count = count + 1
      End If
      
      rs.MoveNext
    Wend

    If debugFlag Then LogError "ServiceBuilder::RunScript() found " & count & " lines of code for " & WrapInQuotes(p_scriptName)

    Set rs = Nothing

    If p_pullInSIBBsFor <> "" Then
      mySQL = "SELECT DISTINCT nodeType FROM ServiceBuilderTable WHERE scriptName = " & WrapInSingleQuotes(p_pullInSIBBsFor)
      Set myList = CreateObject("System.Collections.ArrayList")

      If DBReturnResults(mySql, rs, db) Then
        While Not rs.EOF
          If Not IsNull(rs("nodeType")) Then
            Dim myNodeName : myNodeName = rs("nodeType")

            myList.Add(myNodeName)
          End If

          rs.MoveNext
        Wend

        If debugFlag Then
          LogError "ServiceBuilder::RunScript() requires " & myList.Count() & " SIBBs for " & WrapInQuotes(p_pullInSIBBsFor)

          For i = 0 To myList.Count() - 1
            LogError "ServiceBuilder::RunScript() requires SIBB: " & WrapInQuotes(myList.Item(i))
          Next
        End If

        Set rs = Nothing

        ' Pull in the dependencies for each SIBB function used
        mySql = ""
 
        ' Generate a list of the SIBBs used to match against in the Needs database table
        For i = 0 To myList.Count() - 1
          If mySql <> "" Then mySql = mySql & ","

          mySql = mySql & WrapInSingleQuotes(myList.Item(i))
        Next

        If mySql <> "" Then
          mySql = "SELECT DISTINCT Needs FROM SIBBNeedsTable WHERE SIBB IN (" & mySql & ")"
          
          If DBReturnResults(mySql, rs, db) Then
            While Not rs.EOF
              If Not IsNull(rs("Needs")) Then
                Dim myObject : myObject = CStr(rs("Needs"))

                If myObject <> "" Then
                  If Not myUsesArrayList.Contains(myObject) Then myUsesArrayList.Add(myObject)
                End If
              End If
  
              rs.MoveNext
            Wend
          End If
        End If
       
        For i = 0 To myUsesArrayList.Count() - 1
          If debugFlag Then LogError "ServiceBuilder::RunScript() SIBBs need " & WrapInQuotes(myUsesArrayList.Item(i))

          If baseUsesArrayList.Contains(myUsesArrayList.Item(i)) Then
            If debugFlag Then LogError "ServiceBuilder::RunScript() already have " & WrapInQuotes(myUsesArrayList.Item(i)) & " via Base"
          Else
            myList.Add(myUsesArrayList.Item(i))
          End If
        Next

        Set rs = Nothing

        ' Pull in the source code for each SIBB function and needs used
        For i = 0 To myList.Count() - 1
          If debugFlag Then LogError "ServiceBuilder::RunScript() looking for code for " & WrapInQuotes(myList.Item(i))

          mySql = "SELECT code FROM scripts WHERE FunctionName = " & WrapInSingleQuotes(myList.Item(i)) & " ORDER BY lineNumber"
          count = 0

          If DBReturnResults(mySql, rs, db) Then
            While Not rs.EOF
              If Not IsNull(rs("Code")) Then
                If Len(myCode) > 0 Then myCode = myCode & vbCrLf

                myCode = myCode & rs("Code")
                count = count + 1
              End If
      
              rs.MoveNext
            Wend

            Set rs = Nothing

            If count = 0 Then LogError "ServiceBuilder::Runscript() Error: Could not find code in Scripts table for " & WrapInQuotes(myList.Item(i))            

            If debugFlag Then LogError "ServiceBuilder::Runscript() found " & count & " lines of code for " & WrapInQuotes(myList.Item(i))
          Else
            LogError "ServiceBuilder::Runscript() Error: Looking for code for " & WrapInQuotes(myList.Item(i))
          End If
        Next
      End If

      Set myList = Nothing
    End If

    db.Close
    Set db = Nothing

    If debugFlag Then LogError "ServiceBuilder::RunScript() about to execute"

    ExecuteGlobal myCode
  Else
    LogError "ServiceBuilder::RunScript() Error: DBReturnResults() failed"
  End If

  Set myUsesArrayList = Nothing
  Set baseUsesArrayList = Nothing
End Sub

Function WrapInQuotes(ByRef p)
	WrapInQuotes = chr(34) & p & chr(34)
End Function

Function WrapInSingleQuotes(ByRef p)
	WrapInSingleQuotes = "'" & p & "'"
End Function

Sub LogError(ByRef p_error)
  PBXScript.OutputTrace "ReachAll ECR Designer: " & p_error
End Sub